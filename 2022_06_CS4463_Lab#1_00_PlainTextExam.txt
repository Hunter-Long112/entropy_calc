;2022_06;  CS4463: Steganography: (01T) ---> Lab#1:  TimeLimit: 180 minutes  ---  Version  1.07



QUESTIONS:  (20)  Total Points:  ( 12.0)

1. <2 pts> For lab#1 there are 5 target files: (f9, f10, f11, f14, f16) and 5 tools (MD5.exe, Sha1.exe, Sha256.exe, wbh.exe, and XVI32.exe). The first 3 are common cryptographic hashes. Source code is available online and you are welcome to compile your own. Additionally, the functionality is available directly in JAVA and Python. Wbh.exe is a custom tool used to create histograms and compute entropy. XVI32.exe is a simple hex editor that requires no installation - you may use your own hex editor if you choose. HxD is very good and a free download.
\Open each file in a hex and/or text editor and try to determine the file type and correct extension. Hints: One of the files is encrypted and has the extension ".axx" and another is zipped up.
\Wbh can help too.  The -b option is interesting.

   1.a. (  0.4 pts) What is the file extension for f9?
	.axx

   1.b. (  0.4 pts) What is the file extension for f10?
	.axx

   1.c. (  0.4 pts) What is the file extension for f11?
	.axx

   1.d. (  0.4 pts) What is the file extension for f14?
	.axx

   1.e. (  0.4 pts) What is the file extension for f16?
	.axx


2. <2 pts> Use the XVI32 (or any) hex editor and open the file f9.

   2.a. (  0.4 pts) What is the hexadecimal value of the byte at file offset 0x400?
	0x74

   2.b. (  0.4 pts) Take the LSB of the first 8 bytes and use them to make an 8 bit number. What is that number in binary? Assume the first LSB of the byte in the file is the MSB for the answer.
	C0 B9 07 2E 4F 93 F1 46
	11000000 10111001 00000111 00101110 01001111 10010011 11110001 01000110
	01101110

   2.c. (  0.4 pts) Use the first 4 bytes, take the two LSBs of each byte to form an 8 bit number. What is that number in binary? Assume the first two bits are the most signifcant two bits in your answer.
	00011110

   2.d. (  0.4 pts) Use the first 4 bytes, take the least significant 6 bits of each of the four numbers. Show the resulting 3 bytes in hex - comma separate each hex value.
	0000 0011 1001 0001 1110 1110
	03 91 EE

   2.e. (  0.4 pts) Assume the secret message is: 0xB5. Hiding the MSB of 0xB5 first in the value at offset 0x400, show the new comma separated 8 bytes in hex. No need to use the '0x' prefix.
	74 AC DF 7A 2D 85 95 A1
	01110100 10101100 11011111 01111010 00101101 10000101 10010101 10100001
	
	0xB5
	1 0 1 1 0 1 0 1
	11110100 00101100 11011111 11111010 00101101 1000 0101 0001 0101 1010 0001
	F4,2C,DF,FA,2D,85,15,A1
	

3. <2 pts> Cryptographic Hashing

   3.a. (  0.4 pts) What is the md5 hash of f16?
	05b2c53df0dd4c83c0ca39a547642e5d

   3.b. (  0.4 pts) What is the Sha1 hash of f16?
	0891dd525446f876d62dc1dcbcfa71842a8818cc

   3.c. (  0.4 pts) Use the hex editor to change the 1st byte in the f16 file from a 0x50 to a 0x70. This changes one single bit. What is the new Sha1 value?
	3c1f276e29b82a32ed460f90b3cfd16fd09692b7

   3.d. (  0.4 pts) Since there was only one bit of change between the two files, the Sha1 hash of each file are very similar. (True, False).
	False

   3.e. (  0.4 pts) Take the SHA256 of f16. How many BYTES in this hash?
	32

4. <2 pts> Use the wbh.exe program to determine the entropy of each of the target files. In addition to the screen, the entropy is printed in the text histogram file. For example, doing this: "wbh.exe f9" results in two files: a bitmap of the histogram (hist_f9_@0x0_z_001.bmp) and a text file of the histogram (hist_f9_@0x0.txt). The graphical histograms can also give you some general clues.

   4.a. (1 pt) List the 5 files in order of greatest entropy to least entropy. An EXAMPLE of what your answer should look like is this: "f9, f10, f11, f14, f16." No partial credit on this one.
	f9,f16,f11,f14,f10

   4.b. (  0.4 pts) Based on the entropy alone, which file is most likely encrypted?
	f9

   4.c. (  0.4 pts) Based on the entropy alone, two files are likely compressed - which ones are they?
	f16,f11

   4.d. (  0.2 pts) Based on entropy alone, which file is definitely not compressed or encrypted?
	f10

5. (  4.0 pts) Write a software program to calculate the entropy of an arbitrary file. To determine the probability of a symbol, simply count the number of occurances of each symbol (i.e. byte value) and divide by the total number of bytes in the file. For example if AAABBBB is the data in the file. ProbA = 3/7, ProbB = 4/7. You can use wbh.exe to check your answers. Submit a zip file with the source code, exe code if applicable, sample output, and the XMC file for this lab. You may use JAVA, Python, or C/C++. Make sure to include a make file if done on Linux. Name the .zip file: 2021_06_CS4463_Lab1_abc123.zip using YOUR abc123. I have read and understood these instructions - choose one: (yes, yes, yes)

